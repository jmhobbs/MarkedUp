#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os

from PyQt4 import QtCore, QtGui, QtWebKit

from markedup.parsing import Parser
from markedup.curry import Curry
from markedup.file import MarkedUpFile

BASE_HTML_PRE = '<html><head><link rel="stylesheet" type="text/css" href="/usr/share/markedup/style.css" /></head><body>'
BASE_HTML_POST = '</body></html>'

class MarkedUp ( QtGui.QMainWindow ):

	def __init__( self, parser ):
		QtGui.QMainWindow.__init__( self )

		self.parser = parser

		# This is the file path to the currently edited file (None == New File)
		self.file = None
		# This tracks wether modifications have been made since the last save.
		# TODO: It would be cooler to do something with a hash or something, so that
		#       if you edit it back to the original state it would no longer be "unsaved"
		self.saved = True
		# This tracks the current editing language
		self.currentMarkupLanguage = None

		# Prep the window
		self.setWindowTitle( "MarkedUp - [New File]" )
		self.resize( 800, 600 )
		self.setMinimumWidth( 500 )
		self.setWindowIcon( QtGui.QIcon( '/usr/share/markedup/icon.64x64.png' ) )

		# Our central feature is a two-tab widget with editor and view source
		self.tabs = QtGui.QTabWidget()
		self.setCentralWidget( self.tabs )

		# The editor has live preview, so we split this up
		self.splitter = QtGui.QSplitter( QtCore.Qt.Vertical )
		self.tabs.addTab( self.splitter, "Edit" )

		# Source viewer is a standalone tab
		self.sourceArea = QtGui.QTextEdit()
		self.sourceArea.setAcceptRichText( False )
		self.sourceArea.setReadOnly( True )
		self.tabs.addTab( self.sourceArea, "Source" )

		# We only bother updating the source code when it get's switched to
		QtCore.QObject.connect( self.tabs, QtCore.SIGNAL( 'currentChanged(int)' ), self.update_source )

		# Set up the edit box
		self.editArea = QtGui.QTextEdit()
		self.editArea.setAcceptRichText( False )
		self.editArea.setMinimumHeight( 200 )
		self.splitter.addWidget( self.editArea )

		# We render real-time into the WebKit engine
		self.webView = QtWebKit.QWebView()
		self.webView.setMinimumHeight( 200 )
		self.splitter.addWidget( self.webView )

		# To allow for custom styles/images, we get a base URL located in the same directory as the script
		self.base_url = QtCore.QUrl( "file://%s/resource/" % os.path.dirname( os.path.abspath( __file__ ) ) )

		# Build the toolbar
		self.build_toolbar()

		# We need to default to a language, in case out loading fails
		self.set_markup_language( self.parser.get_available_parsers()[0] )

		# On opening up the system, let's display a welcome message
		# TODO:  If they pass in a CLI file, we should open that instead.
		self.open_file( "/usr/share/markedup/welcome.md" )

		# Any time the text changes, we need to re-parse and update our view
		QtCore.QObject.connect( self.editArea, QtCore.SIGNAL( 'textChanged()' ), self.update_view )

	def build_toolbar ( self ):
		"""Generates the top menu bar."""
		menubar = self.menuBar()
		file_menu = menubar.addMenu( '&File' )

		action = QtGui.QAction( '&New', self )
		action.setShortcut( 'Ctrl+N' )
		action.setStatusTip( 'New File' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), self.new_file )
		file_menu.addAction( action )

		action = QtGui.QAction( '&Open', self )
		action.setShortcut( 'Ctrl+O' )
		action.setStatusTip( 'Open File' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), self.open_file_dialog )
		file_menu.addAction( action )

		file_menu.addSeparator()

		action = QtGui.QAction( '&Save', self )
		action.setShortcut( 'Ctrl+S' )
		action.setStatusTip( 'Save File' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), self.save_file )
		file_menu.addAction( action )

		action = QtGui.QAction( 'Save &As...', self )
		action.setStatusTip( 'Save File As...' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), self.save_file_as_dialog )
		file_menu.addAction( action )

		file_menu.addSeparator()

		action = QtGui.QAction( 'Save &HTML As...', self )
		action.setStatusTip( 'Save HTML As...' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), self.save_html_as_dialog )
		file_menu.addAction( action )

		file_menu.addSeparator()

		action = QtGui.QAction( '&Quit', self )
		action.setShortcut( 'Ctrl+Q' )
		action.setStatusTip( 'Quit MarkedUp' )
		self.connect( action, QtCore.SIGNAL( 'triggered()' ), QtCore.SLOT( 'close()' ) )
		file_menu.addAction( action )

		markup_menu = menubar.addMenu( '&Markup' )
		self.markup_menu_items = {}
		# Use the parser object to get the available parsers, and add them to the menu
		for lwm in self.parser.get_available_parsers():
			self.markup_menu_items[lwm] = QtGui.QAction( self.parser.full_name( lwm ), self )
			self.markup_menu_items[lwm].setCheckable( True )
			self.markup_menu_items[lwm].setStatusTip( 'Use %s' % self.parser.full_name( lwm ) )
			self.connect( self.markup_menu_items[lwm], QtCore.SIGNAL( 'triggered()' ), Curry( self.set_markup_language, lwm ) )
			markup_menu.addAction( self.markup_menu_items[lwm] )

	def closeEvent( self, event ):
		"""On quit we want to check if the current file has been saved."""
		if not self.saved:
			if not self.confirm_unsaved_dialog():
				event.ignore()
				return
		event.accept()

	def update_view ( self, is_signal=True ):
		"""Parses the content in the edit area and sticks it into the WebKit view."""

		if is_signal and self.saved:
			self.saved = False
			if self.file:
				self.setWindowTitle( "MarkedUp - %s (unsaved)" % os.path.basename( self.file.path ) )
			else:
				self.setWindowTitle( "MarkedUp - [New File] (unsaved)" )

		self.webView.setHtml(
			'%s%s%s' % (
				BASE_HTML_PRE,
				self.parser.parse(
					unicode( self.editArea.toPlainText() ),
					self.currentMarkupLanguage
				),
				BASE_HTML_POST
			),
			self.base_url
		);

	def update_source ( self, index ):
		"""Updates the source view, if needed."""
		if index == 1:
			self.sourceArea.setPlainText( self.parser.parse( unicode( self.editArea.toPlainText() ), self.currentMarkupLanguage ) )

	def open_file_dialog ( self ):
		"""Show a open file dialog."""
		if self.saved == False:
			if not self.confirm_unsaved_dialog():
				return

		fileName = QtGui.QFileDialog.getOpenFileName( self, "Open File" )
		if fileName:
			self.open_file( str( fileName ) )

	def save_file_as_dialog ( self ):
		"""Show a save-as dialog."""
		fileName = QtGui.QFileDialog.getSaveFileName( self, "Save File" );
		if fileName:
			# TODO: Overwrite warning.
			self.file.path = str( fileName )
			self.save_file()

	def save_html_as_dialog ( self ):
		"""Show a dialog for saving the HTML output of the markup."""
		fileName = QtGui.QFileDialog.getSaveFileName( self, "Save HTML File", "%s.html" % os.path.basename( self.file.path ), "HTML Files (*.html *.htm)" );
		if fileName:
			# TODO: Overwrite warning
			self.update_source( 1 )
			try:
				with open( str( fileName ), 'w' ) as handle:
					handle.write( str( self.sourceArea.toPlainText() ) )
				self.statusBar().showMessage( "Saved HTML File: %s" % fileName )
			except IOError, e:
				self.statusBar().showMessage( str( e ) )

	def confirm_unsaved_dialog ( self ):
		"""Confirm that the user wants to abandon changes made on the current document."""
		response = QtGui.QMessageBox.warning(
			self,
			"Save Changes?",
			"Your current file has unsaved changes.\n\nDo you want to save it?",
			QtGui.QMessageBox.Save,
			QtGui.QMessageBox.Discard,
			QtGui.QMessageBox.Cancel
		)

		if QtGui.QMessageBox.Save == response:
			return self.save_file()
		elif QtGui.QMessageBox.Discard == response:
			return True
		else:
			return False

	def new_file ( self ):
		"""Create a new file."""
		if self.saved == False:
			if not self.confirm_unsaved_dialog():
				return

		# TODO: Language selection dialog?

		self.editArea.setPlainText( '' )
		self.setWindowTitle( "MarkedUp - [New File]" )
		self.file = None
		self.saved = True
		self.update_view( False )

	##[ Non-GUI ]#################################################################

	def set_markup_language ( self, lwm ):
		"""Set the current editor language."""
		self.currentMarkupLanguage = lwm
		for key, item in self.markup_menu_items.items():
			item.setChecked( key == lwm )
		self.update_view( False )

	def save_file ( self ):
		"""Actually save a file to disk."""
		if not self.file:
			self.save_file_as_dialog()
			return False

		try:
			self.file.put_contents( self.editArea.toPlainText() )
			self.saved = True
			self.setWindowTitle( "MarkedUp - %s" % os.path.basename( self.file.path ) )
			self.statusBar().showMessage( "Saved: %s" % self.file.path )
		except IOError, e:
			# TODO: Error dialog?
			self.statusBar().showMessage( str( e ) )
			self.file = None
			return False

		return True

	def open_file ( self, path ):
		"""Opens a file, detects language (if possible) and loads it into the editor."""
		self.statusBar().showMessage( 'Loading %s' % path )

		file = MarkedUpFile( path )
		try:
			self.editArea.setText( file.get_contents() )
		except IOError, e:
			# TODO: Error dialog?
			self.statusBar().showMessage( str( e ) )
			self.file = None
			return

		self.file = file
		self.saved = True

		self.setWindowTitle( "MarkedUp - %s " % os.path.basename( path ) )

		if self.file.language in self.parser.get_available_parsers():
			self.set_markup_language( self.file.language )
			self.statusBar().showMessage( 'Loaded %s' % path )
		else:
			self.statusBar().showMessage( 'Loaded undetermined file language: %s' % path )


if __name__ == "__main__":
	app = QtGui.QApplication( sys.argv )

	# This Parser object will handle all the markup enumeration and parsing
	parser = Parser()

	# Make sure we have something to parse with
	if len( parser.get_available_parsers() ) == 0:
		QtGui.QMessageBox.critical(
			None,
			"No Parsers Available",
			"MarkedUp could not find any parsers on your system.\n\nVisit http://github.com/jmhobbs/MarkedUp for help.\n\nShutting down."
		);
	else:
		markedup = MarkedUp( parser )
		markedup.show()
		sys.exit( app.exec_() )
